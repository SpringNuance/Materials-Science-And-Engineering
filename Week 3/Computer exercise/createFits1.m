function [fitresult, gof] = createFits1(temperature, energy, FCCtemp, FCCenergy)
%CREATEFITS2(TEMPERATURE,ENERGY,FCCTEMP,FCCENERGY)
%  Create fits.
%
%  Data for 'Boltzmann fitting function' fit:
%      X Input : temperature
%      Y Output: energy
%  Data for 'FCC fitting function' fit:
%      X Input : FCCtemp
%      Y Output: FCCenergy
%  Output:
%      fitresult : a cell-array of fit objects representing the fits.
%      gof : structure array with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 18-Nov-2021 16:53:45

%% Initialization.

% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 2, 1 );
gof = struct( 'sse', cell( 2, 1 ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );

%% Fit: 'Boltzmann fitting function'.
[xData, yData] = prepareCurveData( temperature, energy );

% Set up fittype and options.
ft = fittype( 'a+(b-a)./(1 + exp((c-x)./d))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.DiffMaxChange = 0.01;
opts.DiffMinChange = 1e-10;
opts.Display = 'Off';
opts.MaxFunEvals = 10000;
opts.MaxIter = 10000;
opts.Robust = 'Bisquare';
opts.StartPoint = [1 245 -100 11];
opts.TolFun = 1e-10;
opts.TolX = 1e-10;

% Fit model to data.
[fitresult{1}, gof(1)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'Boltzmann fitting function' );
h = plot( fitresult{1}, xData, yData );

legend( h, 'energy vs. temperature', 'Boltzmann fitting function', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'temperature', 'Interpreter', 'none' );
ylabel( 'energy', 'Interpreter', 'none' );
grid on
hold on

%% Fit: 'FCC fitting function'.
xData = -230:0.01:130;
yData = -2*xData.^2 + 5*xData + 7;


h = plot( xData, yData );
legend( h, 'FCCenergy vs. FCCtemp', 'FCC fitting function', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'FCCtemp', 'Interpreter', 'none' );
ylabel( 'FCCenergy', 'Interpreter', 'none' );
grid on


